/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion_computadora;

import entidades_compartidas.Funcionalidad;
import entidades_compartidas.TipoPermiso;
import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import logica.fachada.FabricaLogica;
import presentacion_computadora.ventanas_auxiliares.OrdenAlfabetico;

/**
 *
 * @author Lourdes
 */
public class ConsultaTipoPermiso extends javax.swing.JFrame {

    DefaultTableModel modelo_tabla = new DefaultTableModel();
    ArrayList<TipoPermiso> lista_tipo_permiso = new ArrayList();
    ArrayList<TipoPermiso> lista_tperm_filtrado = new ArrayList(); 
    ABMTipoPermiso abm;
    boolean filtrado = false;
    boolean ordenado_asc = true;
    
    /**
     * Creates new form ConsultaTipoPermiso
     */
    public ConsultaTipoPermiso() {
        initComponents();
        this.RecargarGrillaPrimeraVez();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        pnlBarra = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnSeleccionarTipoPermiso = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTipoPermiso = new javax.swing.JTable();
        lblMensaje = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtCeldaCero = new javax.swing.JTextField();
        txtCeldaUno = new javax.swing.JTextField();
        txtCeldaDos = new javax.swing.JTextField();
        txtCeldaTres = new javax.swing.JTextField();
        txtCeldaCuatro = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdbTexto = new javax.swing.JRadioButton();
        rdbSubTexto = new javax.swing.JRadioButton();
        rdbEmpiezaTexto = new javax.swing.JRadioButton();
        rdbTerminaTexto = new javax.swing.JRadioButton();
        cmbOrden = new javax.swing.JComboBox<>();
        btnTipoOrden = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        pnlFondo.setBackground(new java.awt.Color(216, 207, 215));
        pnlFondo.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        pnlBarra.setBackground(java.awt.Color.lightGray);
        pnlBarra.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSeleccionarTipoPermiso.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSeleccionarTipoPermiso.setText("Seleccionar Tipo de Permiso");
        btnSeleccionarTipoPermiso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarTipoPermisoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBarraLayout = new javax.swing.GroupLayout(pnlBarra);
        pnlBarra.setLayout(pnlBarraLayout);
        pnlBarraLayout.setHorizontalGroup(
            pnlBarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBarraLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSeleccionarTipoPermiso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar))
        );
        pnlBarraLayout.setVerticalGroup(
            pnlBarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBarraLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlBarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnSeleccionarTipoPermiso)))
        );

        lblTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Consulta de Tipo de Permiso.png"))); // NOI18N
        lblTitulo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        tblTipoPermiso.setAutoCreateRowSorter(true);
        tblTipoPermiso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblTipoPermiso.setAutoscrolls(false);
        tblTipoPermiso.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblTipoPermiso);

        lblMensaje.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMensaje.setForeground(new java.awt.Color(255, 0, 0));

        txtCeldaCero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCeldaCeroKeyReleased(evt);
            }
        });

        txtCeldaUno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCeldaUnoKeyReleased(evt);
            }
        });

        txtCeldaDos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCeldaDosKeyReleased(evt);
            }
        });

        txtCeldaTres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCeldaTresKeyReleased(evt);
            }
        });

        txtCeldaCuatro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCeldaCuatroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtCeldaCero, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCeldaUno, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(txtCeldaDos, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCeldaTres, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(txtCeldaCuatro, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCeldaCero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCeldaUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCeldaTres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCeldaDos)
                    .addComponent(txtCeldaCuatro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Opciones de Grilla:");

        rdbTexto.setSelected(true);
        rdbTexto.setText("Filtrar según el texto introducido");
        rdbTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTextoActionPerformed(evt);
            }
        });

        rdbSubTexto.setText("Filtrar según el sub-texto introducido");
        rdbSubTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSubTextoActionPerformed(evt);
            }
        });

        rdbEmpiezaTexto.setText("Filtrar según con cual sub-texto empieza una palabra");
        rdbEmpiezaTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbEmpiezaTextoActionPerformed(evt);
            }
        });

        rdbTerminaTexto.setText("Filtrar según con cual sub-texto termina una palabra");
        rdbTerminaTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTerminaTextoActionPerformed(evt);
            }
        });

        cmbOrden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IdTipoPermiso\t", "Título", "Descripción", "Descripción Abreviada", "Fecha de Alta" }));
        cmbOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrdenActionPerformed(evt);
            }
        });

        btnTipoOrden.setBackground(new java.awt.Color(0, 0, 0));
        btnTipoOrden.setForeground(new java.awt.Color(255, 255, 255));
        btnTipoOrden.setText("↑");
        btnTipoOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTipoOrdenActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel2.setText("Ordenar grilla por:");

        jLabel4.setText("Introducir Fórmula:");

        jCheckBox1.setText("Opciones Avanzadas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbSubTexto)
                            .addComponent(rdbTexto))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbEmpiezaTexto)
                            .addComponent(rdbTerminaTexto))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cmbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTipoOrden)
                                .addGap(35, 35, 35)
                                .addComponent(jCheckBox1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbTexto)
                    .addComponent(rdbEmpiezaTexto)
                    .addComponent(cmbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTipoOrden)
                    .addComponent(jLabel2)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbSubTexto)
                            .addComponent(rdbTerminaTexto)
                            .addComponent(jLabel4))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout pnlFondoLayout = new javax.swing.GroupLayout(pnlFondo);
        pnlFondo.setLayout(pnlFondoLayout);
        pnlFondoLayout.setHorizontalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(pnlBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlFondoLayout.createSequentialGroup()
                        .addComponent(lblMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlFondoLayout.setVerticalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lblMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        try
        {
            this.dispose();
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSeleccionarTipoPermisoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarTipoPermisoActionPerformed
        // TODO add your handling code here:
        try
        {
            int seleccionado = 0;
            int id_tipo_permiso = 0;

            seleccionado = this.tblTipoPermiso.getSelectedRow();
            if(seleccionado == -1)
            {
                this.lblMensaje.setForeground(Color.RED);
                this.lblMensaje.setText("Usted debe seleccionar un registro");
            }
            else
            {
                id_tipo_permiso = Integer.parseInt(this.tblTipoPermiso.getValueAt(seleccionado, 0).toString());
                //abm.(id_tipo_permiso);
                this.dispose();
            }
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_btnSeleccionarTipoPermisoActionPerformed

    private void txtCeldaCeroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCeldaCeroKeyReleased
        // TODO add your handling code here:
        try
        {
            if(filtrado == true)
            {
                this.RecargarGrilla();
            }

            if(this.txtCeldaCero.getText().equals("") != true || this.txtCeldaUno.getText().equals("") != true || this.txtCeldaDos.getText().equals("") != true || this.txtCeldaTres.getText().equals("") != true)
            {
                for(int i=0; i<this.tblTipoPermiso.getRowCount(); i++)
                {
                    if(this.rdbTexto.isSelected())
                    {
                        if(this.txtCeldaCero.getText().equals(this.tblTipoPermiso.getValueAt(i,0).toString()) == false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbSubTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,0).toString().contains(this.txtCeldaCero.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                    else if(this.rdbEmpiezaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,0).toString().startsWith(this.txtCeldaCero.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbTerminaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,0).toString().endsWith(this.txtCeldaCero.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }

                }
            }
            this.tblTipoPermiso.setModel(modelo_tabla);
            filtrado = true;
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_txtCeldaCeroKeyReleased

    private void txtCeldaUnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCeldaUnoKeyReleased
        // TODO add your handling code here:
        try
        {
            if(filtrado == true)
            {
                this.RecargarGrilla();
            }

            if(this.txtCeldaCero.getText().equals("") != true || this.txtCeldaUno.getText().equals("") != true || this.txtCeldaDos.getText().equals("") != true || this.txtCeldaTres.getText().equals("") != true || this.txtCeldaCuatro.getText().equals("") != true)
            {
                for(int i=0; i<this.tblTipoPermiso.getRowCount(); i++)
                {
                    if(this.rdbTexto.isSelected())
                    {
                        if(this.txtCeldaUno.getText().equals(this.tblTipoPermiso.getValueAt(i,1).toString()) == false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbSubTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,1).toString().contains(this.txtCeldaUno.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                    else if(this.rdbEmpiezaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,1).toString().startsWith(this.txtCeldaUno.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbTerminaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,1).toString().endsWith(this.txtCeldaUno.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                }
            }
            this.tblTipoPermiso.setModel(modelo_tabla);
            filtrado = true;
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_txtCeldaUnoKeyReleased

    private void txtCeldaDosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCeldaDosKeyReleased
        // TODO add your handling code here:
        try
        {
            if(filtrado == true)
            {
                this.RecargarGrilla();
            }

           if(this.txtCeldaCero.getText().equals("") != true || this.txtCeldaUno.getText().equals("") != true || this.txtCeldaDos.getText().equals("") != true || this.txtCeldaTres.getText().equals("") != true || this.txtCeldaCuatro.getText().equals("") != true)
            {
                for(int i=0; i<this.tblTipoPermiso.getRowCount(); i++)
                {
                    if(this.rdbTexto.isSelected())
                    {
                        if(this.txtCeldaDos.getText().equals(this.tblTipoPermiso.getValueAt(i,2).toString()) == false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbSubTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,2).toString().contains(this.txtCeldaDos.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                    else if(this.rdbEmpiezaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,2).toString().startsWith(this.txtCeldaDos.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbTerminaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,2).toString().endsWith(this.txtCeldaDos.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                }
            }
            this.tblTipoPermiso.setModel(modelo_tabla);
            filtrado = true;
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_txtCeldaDosKeyReleased

    private void txtCeldaTresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCeldaTresKeyReleased
        // TODO add your handling code here:
        try
        {
            if(filtrado == true)
            {
                this.RecargarGrilla();
            }

            if(this.txtCeldaCero.getText().equals("") != true || this.txtCeldaUno.getText().equals("") != true || this.txtCeldaDos.getText().equals("") != true || this.txtCeldaTres.getText().equals("") != true || this.txtCeldaCuatro.getText().equals("") != true)
            {
                for(int i=0; i<this.tblTipoPermiso.getRowCount(); i++)
                {
                    if(this.rdbTexto.isSelected())
                    {
                        if(this.txtCeldaTres.getText().equals(this.tblTipoPermiso.getValueAt(i,3).toString()) == false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbSubTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,3).toString().contains(this.txtCeldaTres.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                    else if(this.rdbEmpiezaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,3).toString().startsWith(this.txtCeldaTres.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbTerminaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,3).toString().endsWith(this.txtCeldaTres.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                }
            }
            this.tblTipoPermiso.setModel(modelo_tabla);
            filtrado = true;
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_txtCeldaTresKeyReleased

    private void rdbTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbTextoActionPerformed
        // TODO add your handling code here:
        try
        {
            this.rdbTexto.setSelected(true);
            this.rdbSubTexto.setSelected(false);
            this.rdbEmpiezaTexto.setSelected(false);
            this.rdbTerminaTexto.setSelected(false);

        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_rdbTextoActionPerformed

    private void rdbSubTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSubTextoActionPerformed
        // TODO add your handling code here:
        try
        {
            this.rdbTexto.setSelected(false);
            this.rdbSubTexto.setSelected(true);
            this.rdbEmpiezaTexto.setSelected(false);
            this.rdbTerminaTexto.setSelected(false);
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_rdbSubTextoActionPerformed

    private void rdbEmpiezaTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbEmpiezaTextoActionPerformed
        // TODO add your handling code here:
        try
        {
            this.rdbTexto.setSelected(false);
            this.rdbSubTexto.setSelected(false);
            this.rdbEmpiezaTexto.setSelected(true);
            this.rdbTerminaTexto.setSelected(false);

        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_rdbEmpiezaTextoActionPerformed

    private void rdbTerminaTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbTerminaTextoActionPerformed
        // TODO add your handling code here:
        try
        {
            this.rdbTexto.setSelected(false);
            this.rdbSubTexto.setSelected(false);
            this.rdbEmpiezaTexto.setSelected(false);
            this.rdbTerminaTexto.setSelected(true);

        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_rdbTerminaTextoActionPerformed

    private void cmbOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrdenActionPerformed
        // TODO add your handling code here:
        try
        {
            this.OrdenarListado();
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }

    }//GEN-LAST:event_cmbOrdenActionPerformed

    private void btnTipoOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTipoOrdenActionPerformed
        // TODO add your handling code here:
        try
        {
            if(this.ordenado_asc == true)
            {
                this.btnTipoOrden.setText("↓");
                this.ordenado_asc = false;

            }
            else
            {
                this.btnTipoOrden.setText("↑");
                this.ordenado_asc = true;
            }

            this.OrdenarListado();
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_btnTipoOrdenActionPerformed

    private void txtCeldaCuatroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCeldaCuatroKeyReleased
        // TODO add your handling code here:
            try
        {
            if(filtrado == true)
            {
                this.RecargarGrilla();
            }

            if(this.txtCeldaCero.getText().equals("") != true || this.txtCeldaUno.getText().equals("") != true || this.txtCeldaDos.getText().equals("") != true || this.txtCeldaTres.getText().equals("") != true || this.txtCeldaCuatro.getText().equals("") != true)
            {
                for(int i=0; i<this.tblTipoPermiso.getRowCount(); i++)
                {
                    if(this.rdbTexto.isSelected())
                    {
                        if(this.txtCeldaTres.getText().equals(this.tblTipoPermiso.getValueAt(i,4).toString()) == false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbSubTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,4).toString().contains(this.txtCeldaTres.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                    else if(this.rdbEmpiezaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,4).toString().startsWith(this.txtCeldaTres.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }
                    }
                    else if(this.rdbTerminaTexto.isSelected())
                    {
                        if(this.tblTipoPermiso.getValueAt(i,4).toString().endsWith(this.txtCeldaTres.getText())== false)
                        {
                            this.modelo_tabla.removeRow(i);
                            i--;
                        }

                    }
                }
            }
            this.tblTipoPermiso.setModel(modelo_tabla);
            filtrado = true;
        }
        catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }//GEN-LAST:event_txtCeldaCuatroKeyReleased

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
         try
        {
              /*Re-establezco la ubicación de los controles a medida que voy modificando el tamaño de la pantalla*/
            int altura, largo;
            Point p;

            altura = this.getHeight();
            largo = this.getWidth();
        
            this.lblTitulo.setSize(largo, 29);
            this.pnlFondo.setSize(largo, altura);
            this.pnlBarra.setSize(largo, 31);
            
            p = new Point(1, (altura - 70));
            this.pnlBarra.setLocation(p);
            p = new Point(largo - (btnCancelar.getWidth() + 20), 1);
            this.btnCancelar.setLocation(p);
        }
       catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
        
    }//GEN-LAST:event_formComponentResized

      private void RecargarGrillaPrimeraVez()
    {
        try
        {
          modelo_tabla = new DefaultTableModel();      
          Object[] columna_tabla = {"IdTipoPermiso", "Titulo","Descripción","Descripción Abreviada","Fecha de Alta"};
          modelo_tabla.setColumnIdentifiers(columna_tabla);
          this.lista_tipo_permiso = FabricaLogica.getControladorTipoPermiso().ListarTipoPermiso();
          
          for(TipoPermiso t : this.lista_tipo_permiso)
          {
             Object[] vector ={t.getId(), t.getNombre(), t.getDescripcion(), t.getDesc_abreviada(), t.getFecha_hecho()};
             modelo_tabla.addRow(vector);
                              
          }
       
          this.tblTipoPermiso.setModel(modelo_tabla);
        }
         catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    
    }
    
    private void RecargarGrilla()
    {
        try
        {
          modelo_tabla = new DefaultTableModel();      
          Object[] columna_tabla = {"IdTipoPermiso", "Titulo","Descripción","Descripción Abreviada","Fecha de Alta"};
          modelo_tabla.setColumnIdentifiers(columna_tabla);
          
          for(TipoPermiso t : this.lista_tipo_permiso)
          {
             Object[] vector ={t.getId(), t.getNombre(), t.getDescripcion(), t.getDesc_abreviada(), t.getFecha_hecho()};
             modelo_tabla.addRow(vector);
                              
          }
       
          this.tblTipoPermiso.setModel(modelo_tabla);
        }
         catch(Exception ex)
        {
            this.lblMensaje.setForeground(Color.RED);
            this.lblMensaje.setText(ex.toString());
        }
    }
    
    private void OrdenarListado()
    {
         this.lista_tperm_filtrado = new ArrayList();
            
            for (int i = 0; i < modelo_tabla.getRowCount(); i++)
            {
                TipoPermiso t = new TipoPermiso();

                t.setId(Integer.parseInt(modelo_tabla.getValueAt(i, 0).toString()));
                t.setNombre(modelo_tabla.getValueAt(i, 1).toString());
                t.setDescripcion(modelo_tabla.getValueAt(i, 2).toString());
                t.setDesc_abreviada(modelo_tabla.getValueAt(i, 3).toString());
                t.setFecha_hecho((Date)modelo_tabla.getValueAt(i, 4));

                this.lista_tperm_filtrado.add(t);
            }
            
            switch(this.cmbOrden.getSelectedIndex())
            {
                case 0:
                    if(this.ordenado_asc == true)
                    {
                        this.SortPorInsercionPorId(lista_tperm_filtrado);
                    }
                    else
                    {
                         this.SortPorInsercionPorIdReverso(lista_tperm_filtrado);
                    }
                break;
                case 1:
                    if(this.ordenado_asc == true)
                    {
                        this.SortPorInsercionPorTitulo(lista_tperm_filtrado);
                    }
                    else
                    {
                        this.SortPorInsercionPorTituloReverso(lista_tperm_filtrado);
                    }
                break;
                case 2:
                    if(this.ordenado_asc == true)
                    {
                        this.SortPorInsercionPorDescripcion(lista_tperm_filtrado);
                    }
                    else
                    {
                        this.SortPorInsercionPorDescripcionReverso(lista_tperm_filtrado);
                    }
                break;
                case 3:
                    if(this.ordenado_asc == true)
                    {
                        this.SortPorInsercionPorDescripcionAbreviada(lista_tperm_filtrado);
                    }
                    else
                    {
                        this.SortPorInsercionPorDescripcionAbreviadaReverso(lista_tperm_filtrado);
                    }
                break;
                default:
                    if(this.ordenado_asc == true)
                    {
                       this.SortPorInsercionPorFecha(lista_tperm_filtrado);  
                    }
                    else
                    {
                        this.SortPorInsercionPorFechaReverso(lista_tperm_filtrado);
                    }
            }

            modelo_tabla = new DefaultTableModel();      
            Object[] columna_tabla = {"IdFuncionalidad", "Titulo", "Descripción", "Descripción Abreviada" ,"Fecha de Alta"};
            modelo_tabla.setColumnIdentifiers(columna_tabla);

            for(TipoPermiso t : lista_tperm_filtrado)
            {
                Object[] vector ={t.getId(), t.getDesc_abreviada(), t.getDescripcion(), t.getDesc_abreviada(), t.getFecha_hecho()};
                modelo_tabla.addRow(vector);
            }

            this.tblTipoPermiso.setModel(modelo_tabla);
    }
    
    // <editor-fold defaultstate="collapsed" desc="Métodos de ordenamiento">    
    private void SortPorInsercionPorId (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(tmp.getId() < lista_tipo.get(j-1).getId()) 
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);
          }  
    }
    
    private void SortPorInsercionPorTitulo (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(o.CompararAlfabeticamente(tmp.getNombre(), lista_tipo.get(j-1).getNombre()) == 1) 
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);
                 
          }  
    }
    
    private void SortPorInsercionPorDescripcion (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(o.CompararAlfabeticamente(tmp.getDescripcion(), lista_tipo.get(j-1).getDescripcion()) == 1)
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);

          }  
    }
     
    private void SortPorInsercionPorDescripcionAbreviada (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(o.CompararAlfabeticamente(tmp.getDesc_abreviada(), lista_tipo.get(j-1).getDesc_abreviada()) == 1)
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);

          }  
    }
    
    private void SortPorInsercionPorFecha (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          //OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(tmp.getFecha_hecho().compareTo(lista_tipo.get(j-1).getFecha_hecho()) < 0)
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);

          }  
    }
    
     private void SortPorInsercionPorIdReverso (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(tmp.getId() > lista_tipo.get(j-1).getId()) 
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);
          }  
    }
    
    private void SortPorInsercionPorTituloReverso (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(o.CompararAlfabeticamente(tmp.getNombre(), lista_tipo.get(j-1).getNombre()) == -1) 
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);
                 
          }  
    }
    
    private void SortPorInsercionPorDescripcionReverso (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(o.CompararAlfabeticamente(tmp.getDescripcion(), lista_tipo.get(j-1).getDescripcion()) == -1)
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);

          }  
    }
     
    private void SortPorInsercionPorDescripcionAbreviadaReverso (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(o.CompararAlfabeticamente(tmp.getDesc_abreviada(), lista_tipo.get(j-1).getDesc_abreviada()) == -1)
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);

          }  
    }
    
    private void SortPorInsercionPorFechaReverso (ArrayList<TipoPermiso> lista_tipo) 
    { 
          int j,P;
          TipoPermiso tmp;
          //OrdenAlfabetico o = new OrdenAlfabetico();
         
          for(P=1; P < lista_tipo.size(); P++) 
          {
              j = P;  
              tmp = lista_tipo.get(P); 
      
              while(tmp.getFecha_hecho().compareTo(lista_tipo.get(j-1).getFecha_hecho()) > 0)
              { 
                  lista_tipo.set(j, lista_tipo.get(j-1));
                  
                  j--; 
                  
                  if(j==0)
                  {
                      break;
                  }
              } 
              lista_tipo.set(j, tmp);

          }  
    }
    //</editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaTipoPermiso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaTipoPermiso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaTipoPermiso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaTipoPermiso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaTipoPermiso().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSeleccionarTipoPermiso;
    private javax.swing.JButton btnTipoOrden;
    private javax.swing.JComboBox<String> cmbOrden;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlBarra;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JRadioButton rdbEmpiezaTexto;
    private javax.swing.JRadioButton rdbSubTexto;
    private javax.swing.JRadioButton rdbTerminaTexto;
    private javax.swing.JRadioButton rdbTexto;
    private javax.swing.JTable tblTipoPermiso;
    private javax.swing.JTextField txtCeldaCero;
    private javax.swing.JTextField txtCeldaCuatro;
    private javax.swing.JTextField txtCeldaDos;
    private javax.swing.JTextField txtCeldaTres;
    private javax.swing.JTextField txtCeldaUno;
    // End of variables declaration//GEN-END:variables
}
